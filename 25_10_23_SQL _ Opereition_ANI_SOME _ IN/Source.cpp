/*
ANI_SOME _IN

В SQL оператор ANY используется для проверки, если значение в столбце соответствует любому из значений в списке.

Пример:

SELECT * FROM table_name WHERE column_name > ANY (100, 200, 300);

Этот запрос выберет все строки из таблицы table_name, в которых значение столбца column_name больше,
чем любое из чисел в списке (100, 200, 300).

Оператор SOME эквивалентен оператору ANY. Они оба проверяют, совпадает ли значение с одним из заданных значений.

Принцип работы этих операторов заключается в том, что они сравнивают значение в столбце с каждым из значений в списке или выражении,
и если хотя бы одно из сравнений дает результат “истина”, то весь запрос возвращает “истину”. 
Если ни одно из сравнений не дает “истины”, то запрос возвращает “ложь”.

Операторы ANY, SOME, IN и ALL в SQL используются для сравнения значения столбца с набором значений или подзапросом.

1. Оператор ANY/SOME:
   - Операторы ANY и SOME используются в выражениях сравнения для проверки, соответствует ли значение столбца хотя бы одному значению в списке.
   - Принцип работы: Значение столбца сравнивается с каждым значением в списке, и если хотя бы одно сравнение дает результат "истина",
   то условие считается истинным.
   - Пример:
     SELECT * FROM table_name WHERE column_name > ANY (100, 200, 300);
     Этот запрос выберет все строки из таблицы table_name, в которых значение столбца column_name больше любого из чисел в списке (100, 200, 300).

2. Оператор IN:
   - Оператор IN используется для проверки, соответствует ли значение столбца одному из значений в списке.
   - Принцип работы: Значение столбца сравнивается с каждым значением в списке, и если хотя бы одно сравнение дает результат "истина",
   то условие считается истинным.
   - Пример:
     SELECT * FROM table_name WHERE column_name IN (100, 200, 300);
     Этот запрос выберет все строки из таблицы table_name, в которых значение столбца column_name совпадает с одним из значений в списке (100, 200, 300).

3. Оператор ALL:
   - Оператор ALL используется в выражениях сравнения для проверки, соответствует ли значение столбца всем значениям в списке.
   - Принцип работы: Значение столбца сравнивается с каждым значением в списке, и если все сравнения дают результат "истина",
   то условие считается истинным.
   - Пример:
     SELECT * FROM table_name WHERE column_name > ALL (100, 200, 300);
     Этот запрос выберет все строки из таблицы table_name, в которых значение столбца column_name больше каждого из чисел в списке (100, 200, 300).
     AVG - Avereij - Средняя оценка 
Все эти операторы в SQL позволяют выполнить сравнение значения столбца с набором значений или подзапросом и проверить,
соответствует ли значение определенному условию.

Оператор ALL в SQL можно использовать вместе с агрегатной функцией AVG для проверки, соответствуют ли все значения столбца условию.

Например, предположим у нас есть таблица students со столбцами id (идентификатор студента) и mark (оценка студента). Мы хотим выбрать только те строки, где все оценки студента больше или равны средней оценке всех студентов.

SELECT id, mark
FROM students
WHERE mark >= ALL (SELECT AVG(mark) FROM students);

В этом примере оператор ALL используется для сравнения каждой оценки студента среди всех оценок, 
которые возвращаются из подзапроса (SELECT AVG(mark) FROM students). Подзапрос AVG(mark) возвращает среднюю оценку всех студентов.
Затем оператор ALL сравнивает каждую оценку студента с этим средним значением. Если каждая оценка студента больше или равна средней оценке,
то соответствующие строки выбираются.

Этот запрос вернет только те строки из таблицы students, где все оценки студента больше или равны средней оценке всех студентов.

HAVING
\\\\\\\\\\\\\\
Конструкция запроса, которую вы предложили, может быть использована для составления сложных запросов с подзапросами, группировкой и условиями Having.

Например, предположим у нас есть таблица со студентами и их оценками. Мы хотим выбрать студентов, у которых есть оценка, отличная от максимальной оценки по всему курсу.

SELECT studentname, MAX(grade) AS maxgrade
FROM students
GROUP BY studentname
HAVING maxgrade <> ALL (SELECT MAX(grade) FROM students);

В этом примере мы выбираем имена студентов и соответствующую им максимальную оценку.
Затем мы группируем результаты по имени студента с помощью GROUP BY.
При помощи HAVING мы фильтруем только те строки, в которых максимальная оценка не равна максимальной оценке по всему курсу,
полученной из подзапроса (SELECT MAX(grade) FROM students). Таким образом, мы выбираем только те студенты, у которых есть оценка,
отличная от максимальной оценки на курсе.

Обратите внимание, что конструкция запроса может быть дополнена другими условиями и фильтрами, в зависимости от требуемой логики запроса.

UNION  Композитный запрос с UNION И ORDER BY SELECT FROM AS
\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Композитный запрос с использованием UNION и ORDER BY в SQL позволяет объединить результаты двух или более запросов
в один набор данных и отсортировать его по определенному столбцу.

Принцип работы:

1. UNION: Оператор UNION используется для объединения результатов двух или более запросов в один набор данных.
Результаты должны иметь одинаковую структуру (такое же количество столбцов и типы данных).

2. ORDER BY: Команда ORDER BY используется для сортировки результирующего набора данных по определенному столбцу,
как в по возрастанию (ASC), так и в по убыванию (DESC) порядке.

Пример:

Предположим, у нас есть две таблицы: students1 и students2, с одинаковой структурой (studentid, studentname, и grade).
В таблице students1 хранятся оценки студентов первого курса, а в таблице students2 - оценки студентов второго курса.
Мы хотим объединить результаты двух запросов и отсортировать их по имени студента в алфавитном порядке.

SELECT studentid, studentname, grade
FROM students1
UNION
SELECT studentid, studentname, grade
FROM students2
ORDER BY studentname ASC;

В этом примере мы объединяем результаты двух запросов 
(SELECT studentid, studentname, grade FROM students1 и SELECT studentid, studentname, grade FROM students2)
с помощью UNION. Затем мы сортируем объединенный результат по имени студента, используя ORDER BY studentname ASC.
Здесь ASC означает сортировку в алфавитном порядке по возрастанию.

Таким образом, этот запрос вернет объединенный и отсортированный набор данных, 
содержащий информацию о студентах с их оценками, упорядоченный по имени студента.

UNION ALL  -  Работает быстрее чем UNION . UNION ALL выполняет все по порядку (сначало одно потом второе ) и не удаляет в конце 
дублирующие строки.
\\\\\\\\\
Композитный запрос с использованием UNION ALL в SQL позволяет объединить результаты двух или более запросов
в один набор данных без удаления дублирующихся строк.

Принцип работы:

1. UNION ALL: Оператор UNION ALL используется для объединения результатов двух или более запросов в один набор данных,
сохраняя все строки, включая возможные дубликаты.

Пример:

Предположим, у нас есть две таблицы: students1 и students2, с одинаковой структурой (studentid, studentname, grade).
В таблице students1 хранятся оценки студентов первого курса, а в таблице students2 - оценки студентов второго курса.
Мы хотим объединить результаты двух запросов и получить все строки без удаления дублирующихся записей.

SELECT studentid, studentname, grade
FROM students1
UNION ALL
SELECT studentid, studentname, grade
FROM students2;

В этом примере мы объединяем результаты двух запросов 
(SELECT studentid, studentname, grade FROM students1 и SELECT studentid, studentname, grade FROM students2) 
с помощью UNION ALL. Результатом будет объединенный набор данных, содержащий все строки из обоих таблиц, включая возможные дубликаты.

Таким образом, этот запрос вернет объединенный набор данных, содержащий информацию о студентах и их оценках из двух таблиц,
сохраняя все строки без удаления дубликатов.


Использование UNION ALL при создании сводных таблиц и статистических отчетов.
\\\\\\\\\\\\
Композитный запрос с использованием UNION ALL в SQL может быть использован при создании сводных таблиц и статистических отчетов,
где требуется объединить данные из разных источников и сохранить все строки.

Пример:

Предположим, у нас есть две таблицы: sales_2020 и sales_2021, содержащие данные о продажах соответствующих годов.
Мы хотим создать сводную таблицу, которая объединяет данные из обеих таблиц и показывает общую сумму продаж по годам.

SELECT '2020' AS year, SUM(sales_amount) AS total_sales
FROM sales_2020
UNION ALL
SELECT '2021' AS year, SUM(sales_amount) AS total_sales
FROM sales_2021;

В этом примере мы используем UNION ALL, чтобы объединить результаты двух запросов
- первый запрос возвращает сумму продаж по году 2020 (SELECT '2020' AS year, SUM(sales_amount) AS total_sales FROM sales_2020),
второй запрос возвращает сумму продаж по году 2021 (SELECT '2021' AS year, SUM(sales_amount) AS total_sales FROM sales_2021).

Результатом будет сводная таблица с двумя строками - первая строка показывает сумму продаж за 2020 год,
а вторая строка показывает сумму продаж за 2021 год. Обе строки содержат информацию о годе (представленную в виде столбца year)
и общую сумму продаж (представленную в виде столбца total_sales).

Таким образом, этот запрос позволяет объединить данные из разных таблиц,
вычислить сумму продаж для каждого года и создать сводную таблицу или статистический отчет, 
представляющий общие продажи по годам.



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
ВНУТРЕННЕЕ ОБЪЕДИНЕНИЕ
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Запросы JOIN - отличие от UNION (UNION склеивает по вертикали а JOIN по горизонтали склеивает)
\\\\\\\\\\\\\\\\\\\\
В SQL запросы JOIN используются для объединения данных из двух или более таблиц. Они позволяют получить информацию из разных
таблиц и объединить ее в одном результирующем наборе данных.

UNION, с другой стороны, используется для объединения результатов двух или более запросов в один результирующий набор данных. 
Он удаляет дубликаты из результирующего набора данных.

Приведу пример использования JOIN:

SELECT t1.name, t2.salary
FROM table1 AS t1
JOIN table2 AS t2 ON t1.id = t2.employee_id;

В этом запросе мы объединяем две таблицы (table1 и table2) по общему полю (id). 
В результате мы получаем все строки из обеих таблиц, где значение поля id совпадает.

Отличие JOIN от UNION заключается в том, что JOIN объединяет данные из разных таблиц,
а UNION объединяет результаты двух или более запросов.
JOIN также позволяет фильтровать данные на основе связей между таблицами,
в то время как UNION просто объединяет результаты запросов без учета связей между ними.

Запросы JOIN и оператор UNION являются разными концепциями и выполняют разные типы операций в SQL.

Запросы JOIN используются для объединения данных из двух или более таблиц по заданным условиям, 
основанным на ключевых столбцах.
Они позволяют получить комбинированный результат с информацией, извлеченной из разных таблиц.

Пример JOIN:

Предположим, у нас есть две таблицы: customers (со столбцами customerid и customername) и orders
(со столбцами orderid, customerid и orderdate).
Мы хотим получить список всех заказов с именем клиента, сделавшего заказ.

SELECT orders.orderid, customers.customername
FROM orders
JOIN customers ON orders.customerid = customers.customerid;

В этом примере мы используем оператор JOIN, чтобы объединить таблицы orders и customers по значениям столбца customerid.
Результатом будет комбинированный набор данных с информацией о заказах и именах клиентов.

Оператор UNION, с другой стороны, используется для объединения результатов двух или более запросов,
которые возвращают данные с одинаковой структурой (одинаковое количество столбцов и типы данных).
Он позволяет получить все уникальные строки из результатов запросов, исключая дублирующиеся строки.

Пример UNION:

Предположим, у нас есть две таблицы: customers1 (со столбцами customerid и customername) 
и customers2 (со столбцами customerid и customername). Мы хотим получить список всех уникальных клиентов из обоих таблиц.

SELECT customerid, customername
FROM customers1
UNION
SELECT customerid, customername
FROM

INNER JOIN - не самые оптимальные по скорости работы. Но можно давать псевдоним целому коду и работать как с целым.
\\\\\\\\\\\\\\\

В SQL запросы INNER JOIN используются для соединения двух таблиц на основе общего поля.
Например, если у нас есть две таблицы - products и orders, мы можем соединить их так:

SELECT p.product_name, o.order_id
FROM products AS p
INNER JOIN orders AS o ON p.product_id = o.product_id;

В этом запросе мы соединяем таблицы products и orders по полю product_id.
В результате мы получим все записи из обеих таблиц, где поле product_id совпадает.

Запросы INNER JOIN в SQL используются для объединения данных из двух или более таблиц
на основе общего значения столбца (или нескольких столбцов), называемого ключом.

Пример:

Предположим, у нас есть две таблицы: "users" (пользователи) и "orders" (заказы). 
В таблице "users" есть столбец "user_id", который является уникальным идентификатором каждого пользователя.
В таблице "orders" также есть столбец "user_id", который связывает заказы с пользователями.

Таблица "users":
user_id  |  name
-----------------
   1     |  John
   2     |  Peter
   3     |  Mary

Таблица "orders":
order_id |  user_id  |  product
------------------------------
   1     |     1     |  Phone
   2     |     1     |  Laptop
   3     |     2     |  Tablet

Теперь мы можем использовать INNER JOIN для объединения таблиц "users" и
"orders" по столбцу "user_id" и получить данные о пользователях и их заказах.

Пример SQL-запроса с INNER JOIN:

SELECT users.name, orders.order_id, orders.product
FROM users
INNER JOIN orders ON users.user_id = orders.user_id;

Результат:

name  | order_id |  product
---------------------------
John  |    1     |  Phone
John  |    2     |  Laptop
Peter |    3     |  Tablet

В данном примере используется INNER JOIN для объединения строк из таблицы "users" и 
"orders" по значениям столбца "user_id". Результатом запроса является новая таблица,
содержащая имена пользователей (из таблицы "users") и соответствующие им заказы (из таблицы "orders").

Таким образом, INNER JOIN позволяет нам получать связанные данные из нескольких таблиц,
используя общий ключ для объединения.

Операторы WHERE ORDER BY с использованием композитного JOIN
и применение ограничения строк '29%'
\\\\\\\\\\\\\\\\\\\\\\
Операторы WHERE и ORDER BY работают с композитным JOIN так же, как и с любым другим типом JOIN.
Они используются для фильтрации и сортировки результатов запроса.

Например, если вы хотите получить только те записи, которые соответствуют определенному условию,
вы можете использовать оператор WHERE. Если вы хотите отсортировать результаты по определенному полю,
вы можете использовать оператор ORDER BY.

Ограничение строк в SQL может быть задано с помощью предложения LIMIT. Например, чтобы получить первые 29% записей из таблицы,
вы можете использовать следующий запрос:

SELECT *
FROM table
ORDER BY column
LIMIT 29%;
Этот запрос вернет первые 29% записей из таблицы table, отсортированных по столбцу column.


Операторы WHERE, ORDER BY и композитный JOIN используются в SQL для фильтрации, сортировки и объединения данных из нескольких таблиц.

Предположим, у нас есть две таблицы: "users" (пользователи) и "orders" (заказы).
В таблице "users" есть столбец "userid", а в таблице "orders" есть столбец "userid", который связывает таблицы.

Таблица "users":
userid  |  name
-----------------
   1     |  John
   2     |  Peter
   3     |  Mary

Таблица "orders":
orderid |  userid  |  product
------------------------------
   1     |     1     |  Phone
   2     |     2     |  Laptop
   3     |     3     |  Tablet

Пример SQL-запроса с композитным JOIN, оператором WHERE и ORDER BY с ограничением строк:

SELECT users.name, orders.orderid, orders.product
FROM users
INNER JOIN orders ON users.userid = orders.userid
WHERE users.name LIKE '29%'
ORDER BY orders.orderid DESC;

В этом запросе мы объединяем таблицы "users" и "orders" с помощью композитного JOIN и указываем условие,
при котором значения в столбце "name" начинаются с '29%'. Затем мы сортируем результаты по столбцу "orderid" в порядке убывания.

Результат:

name  | orderid |  product
---------------------------
John  |    1     |  Phone

В данном случае результатом запроса будет только одна строка, так как только имя "John" соответствует ограничению '29%'.
Затем строки будут отсортированы по значению столбца "orderid" в порядке убывания.

Таким образом, при использовании операторов WHERE и ORDER BY вместе с композитным JOIN, мы можем фильтровать,
сортировать и объединять данные из нескольких таблиц в SQL.

ORDER BY - это оператор сортировки, по какой колонке отсортировать.
\\\\\\\\\\\\\\\\
Оператор ORDER BY в SQL используется для сортировки результатов запроса. 
Он принимает один или несколько столбцов, по которым нужно отсортировать результаты, и порядок сортировки (ASC или DESC). Например:

SELECT * FROM users ORDER BY name ASC, age DESC;

Этот запрос выбирает все столбцы из таблицы users и сортирует результаты по имени (в алфавитном порядке) и возрасту (в обратном порядке).



///////////////////////////////////////////
ВНЕШНЕЕ ОБЪЕДИНЕНИЕ
\\\\\\\\\\\\\\\\\\\\\\\\\\

LEFT JOIN
RIGHT JOIN
LEFT JOIN AND RIGHT JOIN
FULL JOIN
И совметное использование левого и правого объединения.


Операторы внешнего объединения LEFT JOIN, RIGHT JOIN и FULL JOIN позволяют объединять данные из двух или более таблиц, сохраняя (или не сохраняя) несоответствующие значения между таблицами.

Предположим, у нас есть две таблицы: "users" (пользователи) и "orders" (заказы). В таблице "users" есть столбец "userid", а в таблице "orders" есть столбец "userid", который связывает таблицы.

Таблица "users":
userid  |  name
-----------------
   1     |  John
   2     |  Peter
   3     |  Mary

Таблица "orders":
orderid |  userid  |  product
------------------------------
   1     |     1     |  Phone
   2     |     3     |  Laptop
   3     |     4     |  Tablet

Пример SQL-запросов с операторами LEFT JOIN, RIGHT JOIN и FULL JOIN:

1. LEFT JOIN:
SELECT users.name, orders.orderid, orders.product
FROM users
LEFT JOIN orders ON users.userid = orders.userid;

Результат:

name  | orderid |  product
---------------------------
John  |    1     |  Phone
Peter |  NULL    |  NULL
Mary  |    2     |  Laptop

В данном примере при использовании LEFT JOIN включаются все строки из таблицы "users"
и только соответствующие значения из таблицы "orders". Если значение в столбце "userid" таблицы "orders"
не находится в таблице "users", то соответствующие значения будут NULL.

2. RIGHT JOIN:
SELECT users.name, orders.orderid, orders.product
FROM users
RIGHT JOIN orders ON users.userid = orders.userid;

Результат:

name  | orderid |  product
---------------------------
John  |    1     |  Phone
Mary  |    2     |  Laptop
NULL  |    3     |  Tablet

В данном примере при использовании RIGHT JOIN включаются все строки из таблицы "orders"
и только соответствующие значения из таблицы "users". Если значение в столбце "userid" таблицы "users"
не находится в таблице "orders", то соответствующие значения будут NULL.

3. FULL JOIN:
SELECT users.name, orders.orderid, orders.product
FROM users
FULL JOIN orders ON users.userid = orders.userid;

Результат:

name  | orderid |  product
---------------------------
John  |    1     |  Phone
Peter |  NULL    |  NULL
Mary  |    2     |  Laptop
NULL  |    3     |  Tablet

В данном примере при использовании FULL JOIN включаются все строки из обеих таблиц "users" и "orders".
Если значение в столбце "userid" одной таблицы не находится в другой таблице, то соответствующие значения будут NULL.

Таким образом, операторы внешнего объединения позволяют объединять данные из таблиц,
сохраняя или не сохраняя несоответствующие значения между ними. LEFT JOIN включает все строки из первой (левой) таблицы,
RIGHT JOIN включает все строки из второй (правой) таблицы,
а FULL JOIN включает все строки из обеих таблиц.

*/